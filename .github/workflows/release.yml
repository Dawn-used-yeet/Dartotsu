name: RELEASE
on:
  push:
    tags:
      - "v*.*.*"
jobs:
  build_linux:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      # Step 1: Clone repository
      - name: Cloning repository
        uses: actions/checkout@v4

      # Step 2: Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.27.1
          cache: true

      # Step 3: Setup system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev webkit2gtk-4.1 libmpv-dev pkg-config

      # Create .env:
      - name: Setup env File
        env:
          SIMKL_SECRET: ${{ secrets.SIMKL_SECRET }}
        run: |
          echo "SIMKL_SECRET= $SIMKL_SECRET" > .env

      # Step 5: Fetch Flutter dependencies
      - name: Fetch Flutter dependencies
        run: flutter pub get

      # Step 6: Build the Linux application
      - name: Build Flutter Linux app
        run: flutter build linux

      # Step 7: Archive the app
      - name: Archive app
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: Dartotsu_Linux_${{github.ref_name}}.zip
          directory: build/linux/x64/release/bundle
      - name: Release Linux Zip
        uses: softprops/action-gh-release@master
        with:
          files: build/linux/x64/release/bundle/Dartotsu_Linux_${{github.ref_name}}.zip

  generate-changelog:
    runs-on: ubuntu-latest
    needs: [build_linux] # Removed other build jobs dependencies, keep linux for now as it is building the artifact. Can remove if changelog generation is independent.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Clear existing CHANGELOG.md
      - name: Clear CHANGELOG.md
        run: |
          echo ""> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Get previous tag
        id: get_prev_tag
        run: |
          echo "Getting the previous tag..."
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "prev_tag=$PREV_TAG" >> $GITHUB_ENV

      - name: Get commit messages between tags
        id: get_commits
        run: |
          COMMITS=$(git log ${{ env.prev_tag }}..HEAD --pretty=format:'%h %s' | tr '\n' '|')
          echo "commits=$COMMITS" >> $GITHUB_ENV

      - name: Categorize commits
        id: categorize
        run: |
          echo "Categorizing commits..."
          FEATURES=""
          BUG_FIXES=""
          REFACTORS=""
          STYLE_CHANGES=""
          PERFORMANCE=""
          CHORES=""
          REPO_URL="https://github.com/${{ github.repository }}"

          IFS='|' read -ra COMMIT_LIST <<< "${{ env.commits }}"
          echo "Commit list: ${COMMIT_LIST[@]}"
          for LINE in "${COMMIT_LIST[@]}"; do
          HASH=$(echo "$LINE" | awk '{print $1}')
          MESSAGE=$(echo "$LINE" | cut -d' ' -f2-)
          LINK="[$HASH]($REPO_URL/commit/$HASH)"

          FORMATTED_COMMIT="* $LINK: $MESSAGE"
          echo "Processing commit: $FORMATTED_COMMIT"
          if [[ $MESSAGE == feat* ]]; then
            FEATURES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == fix* || $MESSAGE == bug* || $MESSAGE == improvement* || $MESSAGE == patch* ]]; then
            BUG_FIXES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == refactor* ]]; then
            REFACTORS+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == style* ]]; then
            STYLE_CHANGES+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == perf* ]]; then
            PERFORMANCE+="$FORMATTED_COMMIT\n"
          elif [[ $MESSAGE == chore* || $MESSAGE == docs* || $MESSAGE == build* || $MESSAGE == ci* ]]; then
            CHORES+="$FORMATTED_COMMIT\n"
          fi
          done

          # Removed the version tag section
          # echo "### ${GITHUB_REF#refs/tags/}" >> CHANGELOG.md  # No version tag added

          if [ -n "$FEATURES" ]; then
          echo "### 🎉 New Features" >> CHANGELOG.md
          echo -e "$FEATURES" >> CHANGELOG.md
          fi
          if [ -n "$BUG_FIXES" ]; then
          echo "### 🛠️ Bug Fixes & Improvements" >> CHANGELOG.md
          echo -e "$BUG_FIXES" >> CHANGELOG.md
          fi
          if [ -n "$REFACTORS" ]; then
          echo "### 🔧 Refactors" >> CHANGELOG.md
          echo -e "$REFACTORS" >> CHANGELOG.md
          fi
          if [ -n "$STYLE_CHANGES" ]; then
          echo "### 🎨 Style Changes" >> CHANGELOG.md
          echo -e "$STYLE_CHANGES" >> CHANGELOG.md
          fi
          if [ -n "$PERFORMANCE" ]; then
          echo "### 🚀 Performance Improvements" >> CHANGELOG.md
          echo -e "$PERFORMANCE" >> CHANGELOG.md
          fi
          if [ -n "$CHORES" ]; then
          echo "### 🧹 Chores & Documentation" >> CHANGELOG.md
          echo -e "$CHORES" >> CHANGELOG.md
          fi

      - name: Commit and push changelog
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "Update changelog for version ${{ github.ref_name }}"
          git push origin HEAD:main

      - name: Set Tag Variable
        id: tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: CHANGELOG.md
          tag: ${{ env.TAG }}
          allowUpdates: true
